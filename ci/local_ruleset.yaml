#
# COPYRIGHT Ericsson 2023
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

modelVersion: 2.0

description: "Ericsson Java Spring Boot App Onboarding handles the onboarding of an O-RAN App Package, unpacking and distributing the artefacts within the app package."

# See image catalog: https://confluence.lmera.ericsson.se/display/ACD/ADP+CICD+Docker+Image+Catalog
docker-images:
  - adp-asciidoc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-asciidocbuilder:${env.ASCII_DOC_BUILDER_TAG}
  - adp-doc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-docbuilder:${env.DOC_BUILDER_TAG}
  - adp-helm-kubectl: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-py3kubehelmbuilder:${env.HELM_KUBECTL_TAG}
  - adp-release-automatic: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:${env.RELEASE_AUTO_TAG}
  - elib-make-utilities: ${elib-make-subpath}-oss-drop/eric-elib/elib_makeutilities:${env.ELIB_MAKE_UTILITIES_TAG}
  - adp-python-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-python3builder:${env.PYTHON3_BUILDER_TAG}
  - adp-maven-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-java17mvnbuilder:${env.MVN_BUILDER_TAG}

import:
  common: "../common-properties.yaml"
  hooklauncher-chart-fragments: "../smart-helm-hooks/delivery/include/hooklauncher/chart-fragments.yaml"

# List of constants
properties:
  - image-secret: armdocker
  - python-image-version: ${var.version}
  - image-registry-path: armdocker.rnd.ericsson.se/proj-eric-oss
  - image-dev-repopath: ${image-registry-path}-dev
  - image-ci-repopath: ${image-registry-path}-ci-internal
  - image-drop-repopath: ${image-registry-path}-drop
  - image-full-name: ${image-drop-repopath}/${common.docker-image-name}

  # Helm Chart name must follow the pattern: eric-[a-z0-9]{1,5}-[a-z0-9-]{1,30}
  - helm-chart-repo-server-path: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss
  - helm-chart-drop-repo: ${helm-chart-repo-server-path}-drop-helm

  # Generic repository for publishing artifacts such as documentation
  - generic-drop-repo: ${helm-chart-repo-server-path}-drop-generic

  # Functional ID for your Team or CI group to push to Gerrit repo
  - git-user: ossadmin
  - git-repo-path: OSS/com.ericsson.oss.ae/eric-oss-app-onboarding
  - git-repo-url: ssh://${git-user}@gerrit-gamma.gic.ericsson.se:29418/${git-repo-path}

  # HOOKLAUNCHER
  - hooklauncher-product-number: ${common.hooklauncher-product-number}
  - hooklauncher-image-name: ${common.docker-image-name}-hooklauncher
  - chart-tmp-dir: ${env.PWD}/.bob/helm

# import environment variables (For example: Jenkins parameters)
env:
  - DOCKER_NETWORK (default=--network host)
  - DOCKER_VOLUME_MAPPING_PASSWD (default=--volume ${env.HOME}/mypasswd:/etc/passwd:ro)
  - HOME
  - PWD
  - PROJ_MVN (default=/proj/mvn)
  - MAVEN_CLI_OPTS (default=-Duser.home=${env.HOME} -B)
  - MAVEN_OPTS (default=-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn)
  # Default docker image tags
  - ASCII_DOC_BUILDER_TAG (default=latest)
  - RELEASE_AUTO_TAG (default=latest)
  - DOC_BUILDER_TAG (default=2.3.0-latest)
  - ELIB_MAKE_UTILITIES_TAG (default=latest)
  - PYTHON3_BUILDER_TAG (default=latest)
  - MVN_BUILDER_TAG (default=latest)
  - K8S_NAMESPACE (default=${common.helm-chart-name}-${var.commithash})
  - KUBECONFIG (default=${env.HOME}/.kube/config)
  - ENABLE_HELM_V3 (default=true)
  - HELM_VERSION (default=3.11.3)
  - HELM_RELEASE (default=${common.helm-chart-name}-release)
  - HELM_INSTALL_TIMEOUT (default=5m0s)
  - HELM_TEST_TIMEOUT (default=5m0s)
  - HELM_KUBECTL_TAG (default=latest)
  - SELI_ARTIFACTORY_REPO_USER
  - SELI_ARTIFACTORY_REPO_PASS
  - SERO_ARTIFACTORY_REPO_USER
  - SERO_ARTIFACTORY_REPO_PASS
  - KAAS_INFO_FILE (default=${env.BUILD_DIR}/kaas-info.log)
  - COLLECT_LOGS_SCRIPT_LOCATION (default="https://arm.sero.gic.ericsson.se/artifactory/proj-ADP_GS_Support_FTP-generic-local/collect_ADP_logs")
  - COLLECT_LOGS_SCRIPT_FILE_NAME (default="collect_ADP_logs.sh")
  - COLLECT_LOGS_SINCE_RELATIVE_TIME (default="2h")
  - COLLECT_LOGS_DIR (default=./k8s-logs)
  - CBOS_VERSION (default=${common.cbos-image-version})
  # ADP MARKETPLACE CREDENTIALS
  - MARKETPLACE_TOKEN_APP_ONBOARDING
  # open API spec
  - OPEN_API_SPEC_DIRECTORY (default=${common.open_api_spec_directory})

# Variables, set by below tasks
var:
  - commithash
  - docker-config-basepath
  - version
  - kaas-version
  - kaas-current-context
  - image-registry
  - image-repopath-internal
  - image-full-name-internal
  - image-repopath-drop
  - helm-chart-repo-internal

# Rules to execute
rules:

  build-hooklauncher-image:
    - task: image-build
      cmd:
        - DOCKER_BUILDKIT=1 docker build ${env.PWD}/smart-helm-hooks/src
          --build-arg COMMON_BASE_OS_IMAGE_REPO="${common.cbos-image-repo}"
          --build-arg COMMON_BASE_OS_IMAGE_NAME="${common.cbos-image-name}"
          --build-arg COMMON_BASE_OS_VERSION="${env.CBOS_VERSION}"
          --build-arg COMMON_BASE_OS_BUILD_REPO_VERSION="${env.CBOS_VERSION}"
          --build-arg COMMIT_HASH=${var.commithash}
          --build-arg DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          --build-arg IMAGE_VERSION="${var.version}"
          --build-arg PRODUCT_NUMBER="${hooklauncher-product-number}"
          --build-arg PRODUCT_REVISION="R2A"
          --tag "${var.image-registry}/${var.image-repopath-internal}/${hooklauncher-image-name}:${var.version}"
          --compress

  add-hooklauncher-templates:
    - task: copy-chart
      cmd:
        - mkdir -p ${chart-tmp-dir} &&
          cp -r ${env.PWD}/charts/eric-oss-app-onboarding ${chart-tmp-dir}
    - rule: hooklauncher-chart-fragments.hooklauncher
      properties:
        - copy-templates-from: ${env.PWD}/smart-helm-hooks/delivery/hooklauncher
        - copy-templates-to: ${chart-tmp-dir}/eric-oss-app-onboarding/templates/common
        - image-name: eric-oss-app-onboarding-hooklauncher
        - image-registry: ${var.image-registry}
        - image-repo-path: ${var.image-repopath-internal}
        - image-tag: ${var.version}
        - parent-helm-chart-name: eric-oss-app-onboarding
        - parent-helm-chart-product-info-path: ${chart-tmp-dir}/eric-oss-app-onboarding/eric-product-info.yaml
        - product-name: eric-oss-app-onboarding hooklauncher
        - product-number: "${hooklauncher-product-number}"
    - task: create-job-inventory-secret
      docker-image: adp-release-automatic
      cmd:
        - echo '{{- include "${common.helm-chart-name}.hkln.job-inventory-secret" . }}' > ${chart-tmp-dir}/${common.helm-chart-name}/templates/common/hooklauncher/job-inventory-secret.yaml
    - task: package
      docker-image: adp-release-automatic
      cmd: sh -c
        'helm-package
        --folder "${chart-tmp-dir}/eric-oss-app-onboarding"
        --output "${env.PWD}/.bob/${common.helm-chart-name}-internal/"
        --version "${var.version}"'

  # Build python scripts image and push to ci-internal repo
  python-image-ci-internal-repo:
    - task: python-image-build
      cmd: sh -c 
        'docker build -t armdocker.rnd.ericsson.se/proj-eric-oss-ci-internal/eric-oss-app-onboarding/python-job-image:${python-image-version}
        --build-arg CBOS_IMAGE_TAG=${env.CBOS_VERSION}
        --build-arg CBOS_IMAGE_REPO=${common.cbos-image-repo}
        --build-arg CBOS_IMAGE_NAME=${common.cbos-image-name}
        --build-arg SELI_ARTIFACTORY_REPO_USER=${env.SELI_ARTIFACTORY_REPO_USER}
        --build-arg SELI_ARTIFACTORY_REPO_PASS=${env.SELI_ARTIFACTORY_REPO_PASS}
        etc/python-job-image'
    - task: python-image-push
      cmd:
        - sh -c "docker push armdocker.rnd.ericsson.se/proj-eric-oss-ci-internal/eric-oss-app-onboarding/python-job-image:${python-image-version} "

  # Build python scripts image and push to drop repo
  python-image-drop-repo:
    - task: python-image-build
      cmd: sh -c
        'docker build -t armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-oss-app-onboarding/python-job-image:${python-image-version}
        --build-arg CBOS_IMAGE_TAG=${env.CBOS_VERSION}
        --build-arg CBOS_IMAGE_REPO=${common.cbos-image-repo}
        --build-arg CBOS_IMAGE_NAME=${common.cbos-image-name}
        --build-arg SELI_ARTIFACTORY_REPO_USER=${env.SELI_ARTIFACTORY_REPO_USER}
        --build-arg SELI_ARTIFACTORY_REPO_PASS=${env.SELI_ARTIFACTORY_REPO_PASS}
        etc/python-job-image'
    - task: python-image-push
      cmd:
        - sh -c "docker push armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-oss-app-onboarding/python-job-image:${python-image-version} "

  # Push image to ci-internal repo and create local version of helm chart
  package-local:
    - task: image-push-internal
      cmd: docker push ${var.image-full-name-internal}:${var.version}
    - task: hooklauncher-image-push-internal
      cmd: docker push ${var.image-registry}/${var.image-repopath-internal}/${hooklauncher-image-name}:${var.version}
    - task: package-helm-internal
      docker-image: adp-release-automatic
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder ${chart-tmp-dir}/${common.helm-chart-name}
        --workdir .bob --output .bob/${common.helm-chart-name}-internal
        --version ${var.version}
        --replace values.yaml:PYTHON_VERSION=${var.version}
        --replace eric-product-info.yaml:VERSION=${var.version}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repopath-internal}
        --replace eric-product-info.yaml:IMAGE_NAME=${common.docker-image-name}

  # Push image to ci-internal repo, create internal version of helm chart and pushes it to internal repo
  package:
    - rule: add-hooklauncher-templates
    - rule: package-local
    - task: helm-upload-internal
      docker-image: adp-release-automatic
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: upload_file.sh
        --filename=.bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --repository=${var.helm-chart-repo-internal}/${common.helm-chart-name}
        --api-token=${env.SELI_ARTIFACTORY_REPO_PASS}

  package-jars:
    - task: mvn-upload-internal
      docker-image: adp-maven-builder
      docker-in-docker: socket
      docker-flags: &mvn-docker-flags-with-creds
        - ${env.DOCKER_NETWORK}
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.PROJ_MVN}:/proj/mvn"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean deploy -DskipTests=true

  helm-dry-run:
    - task: find-docker-config-basepath
      cmd: dirname $HOME/.docker/config.json > .bob/var.docker-config-basepath
    - task: helm-dry-run
      docker-image: adp-helm-kubectl
      docker-flags: &docker_flags_kube_config
        - ${env.DOCKER_NETWORK}
        - "--env HOME=${env.HOME}"
        - "--env K8S_NAMESPACE=${env.K8S_NAMESPACE}"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--env ENABLE_HELM_V3"
        - "--env HELM_VERSION"
        - "--env SELI_ARTIFACTORY_REPO_USER=${env.SELI_ARTIFACTORY_REPO_USER}"
        - "--env SELI_ARTIFACTORY_REPO_PASS=\"${env.SELI_ARTIFACTORY_REPO_PASS}\""
        - "--env COLLECT_LOGS_SCRIPT_LOCATION"
        - "--volume ${env.PWD}:${env.PWD}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}"
        - "--volume ${var.docker-config-basepath}:${var.docker-config-basepath}"
      cmd: helm install .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --dry-run
        --debug
        --generate-name > helm-install-dry-run.log

  helm-install-prep:
    - task: find-docker-config-basepath
      cmd: dirname $HOME/.docker/config.json > .bob/var.docker-config-basepath
    - task: create-namespace-if-not-exists
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create namespace ${env.K8S_NAMESPACE} || true
    - task: helm-install-prep
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create secret generic ${image-secret}
        --from-file=.dockerconfigjson=$HOME/.docker/config.json
        --type=kubernetes.io/dockerconfigjson
        --namespace ${env.K8S_NAMESPACE} || true
    - task: create-pg-secret
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create secret generic eric-appmgr-data-document-db-credentials
        --from-literal=custom-user=apponboardinguser
        --from-literal=custom-pwd=postgres
        --from-literal=super-user=postgres
        --from-literal=super-pwd=postgres
        --from-literal=metrics-user=apponboardingmetricsuser
        --from-literal=metrics-pwd=postgres
        --from-literal=replica-user=apponboardingreplicauser
        --from-literal=replica-pwd=postgres
        --namespace ${env.K8S_NAMESPACE} || true
    - task: create-helm-reg-secret
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create secret generic eric-lcm-helm-chart-registry
        --from-literal=BASIC_AUTH_PASS=password
        --from-literal=BASIC_AUTH_USER=admin
        --namespace ${env.K8S_NAMESPACE} || true
    - task: create-container-reg-secret
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create secret generic eric-oss-app-mgr-container-registry-secret
        --from-literal=password=dockeruser
        --from-literal=name=dockerpassword
        --namespace ${env.K8S_NAMESPACE} || true

  helm-install-eric-data-document-db:
    - task: deploy-db
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - helm repo add cncs-onboarding-repo https://arm.sero.gic.ericsson.se/artifactory/proj-adp-umbrella-released-helm
          --username ${env.SERO_ARTIFACTORY_REPO_USER}
          --password ${env.SERO_ARTIFACTORY_REPO_PASS}
        - helm pull cncs-onboarding-repo/eric-cloud-native-base -d ${env.PWD}/.bob/ --version 93.7.0
        - helm upgrade --install cncs-release ${env.PWD}/.bob/eric-cloud-native-*
          --wait
          --timeout ${env.HELM_INSTALL_TIMEOUT}
          --namespace ${env.K8S_NAMESPACE}
          --kubeconfig ${env.KUBECONFIG}
          --set global.pullSecret=${image-secret}
          --set global.security.tls.enabled=false
          --set eric-data-document-database-pg.enabled=true
          --set eric-data-document-database-pg.nameOverride=eric-appmgr-data-document-db
          --set eric-data-document-database-pg.brAgent.enabled=false
          --set eric-data-document-database-pg.credentials.kubernetesSecretName=eric-appmgr-data-document-db-credentials
          --set eric-data-document-database-pg.highAvailability.synchronousModeEnabled=false
          --set eric-data-document-database-pg.highAvailability.replicaCount=1
          --set eric-si-application-sys-info-handler.enabled=false --set eric-cm-mediator.enabled=false
          --set eric-fh-snmp-alarm-provider.enabled=false --set eric-fh-alarm-handler-db-pg.enabled=false
          --set eric-sec-access-mgmt-db-pg.enabled=false --set eric-cm-mediator-db-pg.enabled=false
          --set eric-lm-combined-server-db-pg.enabled=false --set eric-pm-server.enabled=false
          --set eric-data-message-bus-kf.enabled=false --set eric-data-coordinator-zk.enabled=false
          --set eric-sec-key-management.enabled=false --set eric-fh-alarm-handler.enabled=false
          --set eric-sec-access-mgmt.enabled=false --set eric-sec-sip-tls.enabled=false
          --set eric-odca-diagnostic-data-collector.enabled=false --set eric-data-distributed-coordinator-ed.enabled=false
          --set eric-sec-certm.enabled=false --set eric-ctrl-bro.enabled=false
          --set eric-lm-combined-server.enabled=false --set eric-data-search-engine.enabled=false
          --set eric-data-search-engine-curator.enabled=false --set eric-log-transformer.enabled=false
          --set eric-log-shipper.enabled=false --set eric-data-object-storage-mn.enabled=false
          --set eric-dst-agent.enabled=false --set eric-dst-collector.enabled=false
          --set eric-tm-ingress-controller-cr.enabled=false --set eric-data-key-value-database-rd.enabled=false
          --set eric-data-key-value-database-rd.enabled=false --set eric-cloud-native-kvdb-rd-operand.enabled=false
          --debug

  helm-install:
    - rule: helm-install-prep
    - rule: helm-install-eric-data-document-db
    - task: helm-install-or-upgrade
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm upgrade
        --install ${env.HELM_RELEASE} .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --namespace ${env.K8S_NAMESPACE}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${env.K8S_NAMESPACE}
        --set imageCredentials.pullSecret=${image-secret}
        --set brAgent.enabled=false
        --set global.security.tls.enabled=false
        --set log.streamingMethod="indirect"
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait

  helm-install-kgb:
    - rule: helm-install-prep
    - rule: helm-install-eric-data-document-db
    - task: prepare-helm-repo
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - helm repo add ${common.helm-chart-name} ${helm-chart-drop-repo} --username ${env.SELI_ARTIFACTORY_REPO_USER} --password ${env.SELI_ARTIFACTORY_REPO_PASS}
        - helm repo update
    - task: install-kgb-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm upgrade
        --install ${env.HELM_RELEASE} ${common.helm-chart-name}/${common.helm-chart-name}
        --namespace ${env.K8S_NAMESPACE}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${env.K8S_NAMESPACE}
        --set imageCredentials.pullSecret=${image-secret}
        --set brAgent.enabled=false
        --set global.security.tls.enabled=false
        --set log.streamingMethod="indirect"
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait
        --devel
    - rule: healthcheck

  helm-upgrade:
    - rule: helm-install-kgb
    - rule: helm-install

  helm-dep:
    - task: helm-dep-update
      docker-image: adp-release-automatic
      cmd: "helm dep update charts/${common.helm-chart-name}"

  helm-test:
    - rule: helm-install-prep
    - task: find-docker-config-basepath
      cmd: dirname $HOME/.docker/config.json > .bob/var.docker-config-basepath
    - task: install-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm test ${env.HELM_RELEASE}
        --namespace ${env.K8S_NAMESPACE}
        --timeout ${env.HELM_TEST_TIMEOUT}

  healthcheck:
    - task: find-docker-config-basepath
      cmd: dirname $HOME/.docker/config.json > .bob/var.docker-config-basepath
    - task: healthcheck
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: ./healthcheck.sh

  kaas-info:
    - task: get-kaas-info
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.kaas/version}' > .bob/var.kaas-version
        - kubectl config current-context > .bob/var.kaas-current-context
    - task: output-kaas-info
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - echo -e '# KaaS Version:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.kaas/version}' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n\n# CCD Version:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.erikube/version}' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n\n# KaaS Release Information:' >> ${env.KAAS_INFO_FILE}
        - echo -e "Ericsson Web Services - https://ews.rnd.gic.ericsson.se/cd.php?cluster=${var.kaas-current-context}" >> ${env.KAAS_INFO_FILE}
        - echo -e "KaaS release information - https://confluence.lmera.ericsson.se/display/AD/${var.kaas-version}" >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Version:' >> ${env.KAAS_INFO_FILE}
        - kubectl version >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Cluster Info:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl cluster-info | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Config Context:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl config get-contexts >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Helm Version:' >> ${env.KAAS_INFO_FILE}
        - helm version >> ${env.KAAS_INFO_FILE}

  collect-k8s-logs:
    - task: collect-logs-using-script
      docker-image: adp-helm-kubectl
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3"
        - "--env HOME=${env.HOME}"
        - "--env K8S_NAMESPACE=${env.K8S_NAMESPACE}"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--env HELM_VERSION"
        - "--env SERO_ARTIFACTORY_REPO_USER=${env.SERO_ARTIFACTORY_REPO_USER}"
        - "--env SERO_ARTIFACTORY_REPO_PASS=\"${env.SERO_ARTIFACTORY_REPO_PASS}\""
        - "--env COLLECT_LOGS_SCRIPT_LOCATION"
        - "--env COLLECT_LOGS_SCRIPT_FILE_NAME"
        - "--env COLLECT_LOGS_SINCE_RELATIVE_TIME"
        - "--env COLLECT_LOGS_DIR"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}"
      cmd:
        - mkdir -p ${env.COLLECT_LOGS_DIR}
        - kubectl config view > ${env.COLLECT_LOGS_DIR}/kubectl.config
        - kubectl get ns > ${env.COLLECT_LOGS_DIR}/kubectl-get-ns.log
        - helm ls -Aa > ${env.COLLECT_LOGS_DIR}/helm-ls-Aa.log
        - printenv | grep -v CREDENTIALS | grep -v ARTIFACTORY > ${env.COLLECT_LOGS_DIR}/printenv.log
        - curl -u ${env.SERO_ARTIFACTORY_REPO_USER}:${env.SERO_ARTIFACTORY_REPO_PASS} ${env.COLLECT_LOGS_SCRIPT_LOCATION}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME} > ${env.COLLECT_LOGS_DIR}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME}
        - chmod 777 ${env.COLLECT_LOGS_DIR}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME}
        - sh -c "cd ${env.COLLECT_LOGS_DIR} && ./${env.COLLECT_LOGS_SCRIPT_FILE_NAME} ${env.K8S_NAMESPACE} ${env.COLLECT_LOGS_SINCE_RELATIVE_TIME}"

  # Generate documents: cpi sdifs and raml hml doc
  generate-docs:
    - task: asciidoc-to-sdif
      docker-image: adp-asciidoc-builder
      cmd: /adp_build_doc.sh --project-dir=${env.PWD} --build-dir=${env.PWD}/build
    - task: prepare-for-marketplace
      docker-image: adp-release-automatic
      cmd:
        bash -c 'for i in $(find ./build/doc -maxdepth 1 ! -path ./build/doc -type d);
        do
        package_html.py -i $i/html -o $i/$(basename $i)_HTML.zip;
        done'
    - task: lint
      docker-image: adp-doc-builder
      cmd:
        - /bin/bash -c
          'for i in `find ${env.PWD}/marketplace/ -name "*.md"`; do
          markdownlint --config ${env.PWD}/marketplace/markdownlint.json $i;
          done'
    - task: md-to-pdf
      docker-image: adp-release-automatic
      cmd: 'doc-handler generate --config ${env.PWD}/marketplace/md_config.yaml
                                     --output ${env.PWD}/.bob/build/doc/pdf
                                     --format pdf
                                     --stylesheet ${env.PWD}/marketplace/pdf_style.css'
    - task: md-to-html
      docker-image: adp-release-automatic
      cmd: 'doc-handler generate --config ${env.PWD}/marketplace/md_config.yaml
                                     --output ${env.PWD}/.bob/build/doc/html
                                     --format html
                                     --zip'

  # Generate HTML output files from OpenAPI spec
  rest-2-html:
    - task: check-has-open-api-been-modified
      cmd:
        - if [ -z "$(git diff --name-status HEAD~ | grep ${env.OPEN_API_SPEC_DIRECTORY}/eric-oss-app-onboarding-openapi.yaml)" ]; then
          echo "NO modifications have been made to the OpenAPI spec.";
          echo false > .bob/var.has-openapi-spec-been-modified;
          else
          echo "There HAS been modifications made to the OpenAPI spec.";
          echo true > .bob/var.has-openapi-spec-been-modified;
          fi
    - task: zip-open-api-doc
      docker-image: elib-make-utilities
      cmd:
        - ls -ltr ${env.OPEN_API_SPEC_DIRECTORY}
        - sh -c 'cd ${env.OPEN_API_SPEC_DIRECTORY} && zip -r eric-oss-app-onboarding-openapi.zip eric-oss-app-onboarding-openapi.yaml'
        - ls -ltr ${env.OPEN_API_SPEC_DIRECTORY}
    - task: generate-html-output-files
      docker-image: elib-make-utilities
      cmd:
        - ls -ltr
        - /usr/src/elib/makerestc
          -inp ${env.OPEN_API_SPEC_DIRECTORY}/eric-oss-app-onboarding-openapi.zip
          -oud .
          -rev ${var.revision}
          -inf ${var.commit-email}
          -num ${env.REST2HTML_NUM}
          -cre ${var.commit-author}
          -app ${var.commit-author}
          -d
          ${var.rest2html-optional}
        - ls -ltr
        - cat rest_conversion_log.txt

  marketplace-upload-in-development:
    - task: upload-doc-to-arm
      docker-image: adp-release-automatic
      cmd: marketplace upload
        --arm-api-token ${env.SELI_ARTIFACTORY_REPO_PASS}
        --arm-url https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss-dev-helm/eric-oss-app-onboarding/docs/indevelopment
        --config ${env.PWD}/marketplace/marketplace_upload_dev.config.yaml
        --dev
        --refresh
        --portal-token ${env.MARKETPLACE_TOKEN_APP_ONBOARDING}
        --debug

  marketplace-upload-release:
    - task: upload-doc-to-arm
      docker-image: adp-release-automatic
      cmd: marketplace upload
        --arm-api-token ${env.SELI_ARTIFACTORY_REPO_PASS}
        --arm-url https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss-dev-helm/eric-oss-app-onboarding/docs/release
        --config ${env.PWD}/marketplace/marketplace_upload_release.config.yaml
        --version ${var.version}
        --refresh
        --portal-token ${env.MARKETPLACE_TOKEN_APP_ONBOARDING}

  marketplace-upload-refresh:
    - task: refresh-adp-portal-marketplace
      docker-image: adp-release-automatic
      cmd: marketplace refresh --portal-token ${env.MARKETPLACE_TOKEN_APP_ONBOARDING}

  # Run unit tests in python and coverage for SonarQube analysis
  test-python:
    - task: python-code-coverage
      docker-image: adp-python-builder
      docker-flags:
        - "--env COVERAGE_FILE=/tmp/.coverage"
        - "--env PYTHONPATH=$PYTHONPATH:${env.PWD}/etc/python-job-image"
      cmd:
        - sh -c 'mkdir env;
          python -m venv env;
          source env/bin/activate;
          python -m pip install --upgrade pip;
          cd etc/python-job-image;
          pip install -r tests/test-requirements;
          python -m coverage run -m unittest discover tests "test_*.py" || exit 1;
          python -m coverage xml --fail-under=90 --omit="tests/**.py" -o "../python-job-image-coverage-report.xml";
          deactivate;'

  # Publish docker images and helm charts to drop repository
  # Call publish only when merged to master
  publish:
    - task: copy-chart
      cmd:
        - mkdir -p ${chart-tmp-dir} &&
          cp -r ${env.PWD}/charts/eric-oss-app-onboarding ${chart-tmp-dir}

    - rule: hooklauncher-chart-fragments.hooklauncher
      properties:
        - copy-templates-from: ${env.PWD}/smart-helm-hooks/delivery/hooklauncher
        - copy-templates-to: ${chart-tmp-dir}/eric-oss-app-onboarding/templates/common
        - image-name: eric-oss-app-onboarding-hooklauncher
        - image-registry: ${var.image-registry}
        - image-repo-path: ${var.image-repopath-drop}
        - image-tag: ${var.version}
        - parent-helm-chart-name: eric-oss-app-onboarding
        - parent-helm-chart-product-info-path: ${chart-tmp-dir}/eric-oss-app-onboarding/eric-product-info.yaml
        - product-name: eric-oss-app-onboarding hooklauncher
        - product-number: "${hooklauncher-product-number}"
    - task: create-job-inventory-secret
      docker-image: adp-release-automatic
      cmd:
        - echo '{{- include "${common.helm-chart-name}.hkln.job-inventory-secret" . }}' > ${chart-tmp-dir}/${common.helm-chart-name}/templates/common/hooklauncher/job-inventory-secret.yaml

    - task: package-helm-public
      docker-image: adp-release-automatic
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder ${chart-tmp-dir}/${common.helm-chart-name}
        --workdir .bob --output build
        --version ${var.version}
        --replace values.yaml:PYTHON_VERSION=${var.version}
        --replace VERSION=${var.version}
        --replace eric-product-info.yaml:VERSION=${var.version}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repopath-drop}
        --replace eric-product-info.yaml:IMAGE_NAME=${common.docker-image-name}
    - task: image-pull-internal
      cmd: docker pull ${var.image-full-name-internal}:${var.version}
    - task: image-tag-public
      cmd: docker tag ${var.image-full-name-internal}:${var.version} ${image-full-name}:${var.version}
    - task: image-push-public
      cmd: docker push ${image-full-name}:${var.version}
    - task: hooklauncher-image-pull-internal
      cmd: docker pull ${var.image-registry}/${var.image-repopath-internal}/${hooklauncher-image-name}:${var.version}
    - task: hooklauncher-image-tag-public
      cmd: docker tag ${var.image-registry}/${var.image-repopath-internal}/${hooklauncher-image-name}:${var.version} ${var.image-registry}/${var.image-repopath-drop}/${hooklauncher-image-name}:${var.version}
    - task: hooklauncher-image-push-public
      cmd: docker push ${var.image-registry}/${var.image-repopath-drop}/${hooklauncher-image-name}:${var.version}
    - task: helm-upload
      docker-image: adp-release-automatic
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: upload_file.sh
        --filename=build/${common.helm-chart-name}-${var.version}.tgz
        --repository=${helm-chart-drop-repo}/${common.helm-chart-name}
        --api-token=${env.SELI_ARTIFACTORY_REPO_PASS}
    - rule: publish-oas
    - rule: publish-jars

  # Publish OpenAPI specs to Generic drop repository
  publish-oas:
    - task: upload-open-api-specs
      docker-image: adp-helm-kubectl
      docker-flags:
        - "--env OPEN_API_SPEC_DIRECTORY=${env.OPEN_API_SPEC_DIRECTORY}"
      cmd:
        bash -c 'for oas in ${env.OPEN_API_SPEC_DIRECTORY}/*openapi.yaml; do
        if [ -f $oas ]; then
        curl -X PUT -T $oas ${generic-drop-repo}-local/${common.helm-chart-name}/${var.version}/$(basename -- $oas) -u ${env.SELI_ARTIFACTORY_REPO_USER}:${env.SELI_ARTIFACTORY_REPO_PASS};
        fi
        done'

  publish-jars:
    - task: mvn-upload
      docker-image: adp-maven-builder
      docker-in-docker: socket
      docker-flags:
        - ${env.DOCKER_VOLUME_MAPPING_PASSWD}
        - "--volume /etc/ssh:/etc/ssh"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.PROJ_MVN}:/proj/mvn"
        - ${env.DOCKER_NETWORK}
        - "--env SELI_ARTIFACTORY_REPO_USER=${env.SELI_ARTIFACTORY_REPO_USER}"
        - "--env SELI_ARTIFACTORY_REPO_PASS=\"${env.SELI_ARTIFACTORY_REPO_PASS}\""
        - "--env MAVEN_OPTS"
      cmd:
        - git stash && git checkout master
        - mvn ${env.MAVEN_CLI_OPTS} -Darguments=" -Dmaven.javadoc.skip=true -DskipTests=true" clean deploy